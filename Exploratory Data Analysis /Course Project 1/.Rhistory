for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death
## rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
##Part 3: rankhospital.R:
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death
## rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if (any(data[7] == state) == FALSE) {stop("invalid state")}
if( outcome %in% outcomes == FALSE ) {stop("invalid outcome") }
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
}
rankhospital("TX", "heart failure", 4)
best("TX", "heart attack")
library(swirl)
swirl()
View(top_counts)
swirl()
View(top_counts_sorted)
siwrl()
swirl()
View(top_unique)
swirl()
View(top_unique_sorted)
submit()
submit()
submit()
view(result3)
View(result3)
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, students, sex, count, -grade)
gather(data = students, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
seperate(res, col=sex_class, into= c("sex", "class"))
seperate(data=res, col=sex_class, into= c("sex", "class"))
separate(data=res, col=sex_class, into= c("sex", "class"))
submit()
submit()
submit()
submit()
submit()
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
liberary(readr)
library(readr)
parse_number("class5")
?mutate
submit()
submit()
submit
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?separate
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(c("part","sex")) %>%
print
submit()
submit()
?select
select(-contains("total")) %>%
gather(key= part_sex, value= count, -score_range) %>%
eparate(c("part","sex")) %>%
separate(c("part","sex")) %>%
print
submit()
submit()
submit()
save.image("~/Desktop/R_TIDYING_DATA.RData")
savehistory("dataout.txt")
setwd("~/")
ls
library(reshape)
features        <- read.table("./UCI HAR Dataset/features.txt",header=FALSE)
pwd()
wd()
getwd()
setwd("~/datascience/datasciencecoursera/Getting and Cleaning Data/Peer Graded Assignment")
getwd()
features        <- read.table("./UCI HAR Dataset/features.txt",header=FALSE)
View(features)
activity_label   <- read.table("./UCI HAR Dataset/activity_labels.txt",header=FALSE)
subject_train    <-read.table("./UCI HAR Dataset/train/subject_train.txt", header=FALSE)
x_train          <- read.table("./UCI HAR Dataset/train/X_train.txt", header=FALSE)
y_train          <- read.table("./UCI HAR Dataset/train/y_train.txt", header=FALSE)
View(activity_label)
View(features)
View(subject_train)
View(x_train)
View(activity_label)
subject_train
summary(x_train)
x_train   <- read.table("./UCI HAR Dataset/train/X_train.txt", header=FALSE)
x_test         <- read.table("./UCI HAR Dataset/test/X_test.txt", header=FALSE)
merged_data <- rbind(x_train, x_test)
head(merged_data)
data_subject <- rbind(subject_train, subject_test)
data_activity<- rbind(y_train, y_test)
data_features<- rbind(x_train, x_test)
subject_train <-read.table("./UCI HAR Dataset/train/subject_train.txt", header=FALSE)
x_train   <- read.table("./UCI HAR Dataset/train/X_train.txt", header=FALSE)
y_train  <- read.table("./UCI HAR Dataset/train/y_train.txt", header=FALSE)
#loading Test data :
subject_test    <-read.table("./UCI HAR Dataset/test/subject_test.txt", header=FALSE)
x_test         <- read.table("./UCI HAR Dataset/test/X_test.txt", header=FALSE)
y_test         <- read.table("./UCI HAR Dataset/test/y_test.txt", header=FALSE)
data_feature_names        <- read.table("./UCI HAR Dataset/features.txt",header=FALSE)
activity_labels   <- read.table("./UCI HAR Dataset/activity_labels.txt",header=FALSE)
data_subject <- rbind(subject_train, subject_test)
data_activity<- rbind(y_train, y_test)
data_features<- rbind(x_train, x_test)
names(data_subject)<-c("subject_id")
names(data_activity)<- c("activity_id")
names(data_features)<- data_features$V2
remove(x_test)
describe(data_features)
head(data_features)
setwd("~/datascience/datasciencecoursera/Getting and Cleaning Data/Peer Graded Assignment")
#Part 1 : Merging the data sets
#loading Train data :
subject_train <-read.table("./UCI HAR Dataset/train/subject_train.txt", header=FALSE)
x_train   <- read.table("./UCI HAR Dataset/train/X_train.txt", header=FALSE)
y_train  <- read.table("./UCI HAR Dataset/train/y_train.txt", header=FALSE)
#loading Test data :
subject_test    <-read.table("./UCI HAR Dataset/test/subject_test.txt", header=FALSE)
x_test         <- read.table("./UCI HAR Dataset/test/X_test.txt", header=FALSE)
y_test         <- read.table("./UCI HAR Dataset/test/y_test.txt", header=FALSE)
data_feature_names   <- read.table("./UCI HAR Dataset/features.txt",header=FALSE)
activity_labels   <- read.table("./UCI HAR Dataset/activity_labels.txt",header=FALSE)
setwd("~/datascience/datasciencecoursera/Getting and Cleaning Data/Peer Graded Assignment")
#Part 1 : Merging the data sets
#loading Train data :
subject_train <-read.table("./UCI HAR Dataset/train/subject_train.txt", header=FALSE)
x_train   <- read.table("./UCI HAR Dataset/train/X_train.txt", header=FALSE)
y_train  <- read.table("./UCI HAR Dataset/train/y_train.txt", header=FALSE)
#loading Test data :
subject_test    <-read.table("./UCI HAR Dataset/test/subject_test.txt", header=FALSE)
x_test         <- read.table("./UCI HAR Dataset/test/X_test.txt", header=FALSE)
y_test         <- read.table("./UCI HAR Dataset/test/y_test.txt", header=FALSE)
data_feature_names   <- read.table("./UCI HAR Dataset/features.txt",header=FALSE)
activity_labels   <- read.table("./UCI HAR Dataset/activity_labels.txt",header=FALSE)
colnames(xtrain) <- features[,2]
#After exploring the data , I named the columns to make processing easier
colnames(xtrain) <- data_feature_names[,2]
#After exploring the data , I named the columns to make processing easier
colnames(x_train) <- data_feature_names[,2]
View(x_train)
colnames(y_train) <- "activity_Id"
colnames(x_train) <- data_feature_names[,2]
colnames(x_test) <- data_feature_names[,2]
colnames(y_train) <- "activity_id"
colnames(y_test) <- "activity_id"
colnames(subject_train) <- "subject_id"
colnames(subject_test) = "subject_id"
colnames(activity_labels) <- c('activity_id','activity_type')
colnames(activity_labels)
merged_train <- cbind(y_train, subject_train, x_train)
merged_test <- cbind(y_test, subject_test, x_test)
dataset_master <- rbind(merged_train, merged_test)
View(dataset_master)
mean_std <-dataset_master[,grepl("mean|std|subject|activityId",colnames(dataset_master))]
View(mean_std)
View(activity_labels)
merge(mean_std, activity_labels, by='activity_id', all.x=TRUE)
View(activity_labels)
#PART 2 :Extracts only the measurements on the mean and standard deviation for each measurement.
mean_std <-dataset_master[,grepl("mean|std|subject_id|activity_id",colnames(dataset_master))]
merge(setForMeanAndStd, activity_labels, by='activity_id', all.x=TRUE)
mean_std <-dataset_master[,grepl("mean|std|subject_id|activity_id",colnames(dataset_master))]
merge(mean_std, activity_labels, by='activity_id', all.x=TRUE)
mean_std <- merge(mean_std, activity_labels, by='activity_id', all.x=TRUE)
View(mean_std)
?names
?gsub
names(mean_std) <- gsub("\\(|\\)", "", names(mean_std), perl  = TRUE)   #perl = regexes
names(mean_std) <- make.names(names(mean_std))
names(mean_std) <- gsub("Acc", "Acceleration", names(mean_std))
names(mean_std) <- gsub("^t", "Time", names(mean_std))
names(mean_std) <- gsub("^f", "Frequency", names(mean_std))
names(mean_std) <- gsub("BodyBody", "Body", names(mean_std))
names(mean_std) <- gsub("mean", "Mean", names(mean_std))
names(mean_std) <- gsub("std", "Std", names(mean_std))
names(mean_std) <- gsub("Freq", "Frequency", names(mean_std))
names(mean_std) <- gsub("Mag", "Magnitude", names(mean_std))
#Part 5 From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_set <- aggregate(. ~subject_id + activity_id, mean_std, mean)
tidy_set <- tidy_set[order(tidy_set$subject_id, tidy_sett$activity_id),
]
tidy_set <- tidy_set[order(tidy_set$subject_id, tidy_set$activity_id),]
View(tidy_set)
write.table(tidy_set, "tidy_data_set.txt", row.name=FALSE)
setwd("~/datascience/datasciencecoursera/Exploratory Data Analysis /Course Project 1")
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
View(powerdata)
#Convert datetime
powerdata$Date <- as.Date(powerdata$Date, format = "%d/%m/%Y")
colnames(powerdata)
#reading in the data
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
View(powerdata)
#Date in d/m/y
#Convert datetime
powerdata$Date <- as.Date(powerdata$Date, format = "%d/%m/%Y")
#Subsetting the data
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
#reading in the data
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
#Date in d/m/y
#Convert datetime
powerdata$Date <- as.Date(powerdata$Date, format = "%d/%m/%Y")
#Subsetting the data
powerdata <- powerdata[powerdata$Date %in% c("1-2-2007","2-2-2007") ,]
#reading in the data
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
#Date in d/m/y
#Convert datetime
powerdata$Date <- as.Date(powerdata$Date, format = "%Y%m%d")
#Subsetting the data
powerdata <- subset(powerdata, subset = (Date >= "2007-02-01" & Date <= "2007-02-02"))
#reading in the data
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
#Subsetting the data
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
#Convert datetime
powerdata$Date <- as.Date(powerdata$Date, format = "%Y%m%d")
hist(powerdata$Global_active_power, col="red", border="black", main ="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency")
powerdata <-na.omit(powerdata)
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
#Date in d/m/y
#Subsetting the data
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
#Convert datetime and neumerica vlaues
powerdata$Date <- as.Date(powerdata$Date, format = "%Y%m%d")
powerdata <- as.numeric(powerdata$Global_active_power)
hist(powerdata$Global_active_power, col="red", border="black", main ="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency")
#reading in the data
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
#Subsetting the data
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
#Convert datetime and neumerica vlaues
#powerdata$Date <- as.Date(powerdata$Date, format = "%Y%m%d")
powerdata$Global_active_power <- as.numeric(powerdata$Global_active_power)
hist(powerdata$Global_active_power, col="red", border="black", main ="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency")
#save histogram as png file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
powerdata$datetime <- strptime(paste(powerdata$Date, powerdata$Time), "%Y-%m-%d %H:%M:%S")
powerdata$Date <- as.Date(powerdata$Date, format = "%Y%m%d")
powerdata$datetime <- strptime(paste(powerdata$Date, powerdata$Time), "%Y-%m-%d %H:%M:%S")
View(powerdata)
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
powerdata$Date <- as.Date(powerdata$Date, format = "%d%m%Y")
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- paste(as.Date(powerdata$Date), powerdata$Time)
powerdata$Datetime <- as.POSIXct(datetime)
plot(powerdata$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(powerdata$Global_active_power~powerdata$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
powerdata$Date <- as.Date(powerdata$Date, format="%d/%m/%Y")
datetime <- paste(as.Date(powerdata$Date), powerdata$Time)
powerdata$Datetime <- as.POSIXct(datetime)
plot(powerdata$Global_active_power~powerdata$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
with(powerdata, {
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
par(mfcol = c(2,2))
plot(powerdata,Global_active_power~Datetime, pwrcons$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power(kilowatts)")
par(mfcol = c(2,2))
plot(powerdata,Global_active_power~Datetime, powerdata$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power(kilowatts)")
par(mfcol = c(2,2))
plot(powerdata,Global_active_power~Datetime, powerdata$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power(kilowatts)")
plot(powerdata,Sub_metering_1~Datetime, powerdata$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
#Adds line graph for date/time v Sub metering 2 data in red
lines(powerdata,Sub_metering_2~Datetime$Sub_metering_2, type = "l", col = "red" )
#Adds line graph for date/time v Sub metering 3 data in blue
lines(powerdata,Sub_metering_3~Datetime$Sub_metering_3, type = "l", col = "blue" )
#Adds legend to graph
legend("topright", lty= 1, col = c("Black", "red", "blue"), legend = c( "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#Creates first graph in column 2
#This graphs date/time v Voltage
plot(strptime(pwrcons$Timestamp, "%d/%m/%Y %H:%M:%S"), pwrcons$Voltage, type = "l",
xlab = "datetime", ylab = "Voltage")
#Creates second graph in column 2
#This plots datetime v global reactive power
plot(powerdata,Voltage~Datetime, powerdata$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global_reactive_power")
par(mfcol = c(2,2))
plot(powerdata,Global_active_power~Datetime, powerdata$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power(kilowatts)")
plot(powerdata,Sub_metering_1~Datetime, powerdata$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
#Adds line graph for date/time v Sub metering 2 data in red
lines(powerdata,Sub_metering_2~Datetime$Sub_metering_2, type = "l", col = "red" )
#Adds line graph for date/time v Sub metering 3 data in blue
lines(powerdata,Sub_metering_3~Datetime$Sub_metering_3, type = "l", col = "blue" )
#Adds legend to graph
legend("topright", lty= 1, col = c("Black", "red", "blue"), legend = c( "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#Creates second graph in column 2
#This plots datetime v global reactive power
plot(powerdata,Voltage~Datetime, powerdata$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global_reactive_power")
#Sets graphing parameters so that 4 graphs are drawn by column
par(mfcol = c(2,2))
plot(powerdata,Global_active_power~Datetime, powerdata$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power(kilowatts)")
plot(powerdata,Sub_metering_1~Datetime, powerdata$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
lines(powerdata,Sub_metering_2~Datetime$Sub_metering_2, type = "l", col = "red" )
lines(powerdata,Sub_metering_3~Datetime$Sub_metering_3, type = "l", col = "blue" )
legend("topright", lty= 1, col = c("Black", "red", "blue"), legend = c( "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(powerdata, Voltage~Datetime, powerdata$Voltage, type = "l",
xlab = "datetime", ylab = "Voltage")
plot(powerdata,Global_reactive_power~Datetime, powerdata$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global_reactive_power")
#Sets graphing parameters so that 4 graphs are drawn by column
par(mfcol = c(2,2))
plot(powerdata,Global_active_power~Datetime, powerdata$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power(kilowatts)")
plot(powerdata,Sub_metering_1~Datetime, powerdata$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
lines(powerdata,Sub_metering_2~Datetime$Sub_metering_2, type = "l", col = "red" )
lines(powerdata,Sub_metering_3~Datetime$Sub_metering_3, type = "l", col = "blue" )
legend("topright", lty= 1, col = c("Black", "red", "blue"), legend = c( "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(powerdata, Voltage~Datetime, powerdata$Voltage, type = "l",
xlab = "datetime", ylab = "Voltage")
plot(powerdata,Global_reactive_power~Datetime, powerdata$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global_reactive_power")
par(mfcol = c(2,2))
plot(powerdata, Global_active_power~Datetime, type = "l", xlab = "", ylab = "Global Active Power(kilowatts)")
plot(powerdata, Sub_metering_1~Datetime, type = "l", xlab = "", ylab = "Energy sub metering")
lines(powerdata,Sub_metering_2~Datetime, type = "l", col = "red" )
lines(powerdata,Sub_metering_3~Datetime, type = "l", col = "blue" )
legend("topright", lty= 1, col = c("Black", "red", "blue"), legend = c( "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(powerdata, Voltage~Datetime, type = "l",
xlab = "datetime", ylab = "Voltage")
plot(powerdata,Global_reactive_power~Datetime, type = "l",
xlab = "datetime", ylab = "Global_reactive_power")
par(mfcol = c(2,2))
plot(powerdata, Global_active_power~Datetime, type = "l", xlab = "", ylab = "Global Active Power(kilowatts)")
plot(powerdata, Sub_metering_1~Datetime, type = "l", xlab = "", ylab = "Energy sub metering")
lines(powerdata,Sub_metering_2~Datetime, col = "red" )
lines(powerdata,Sub_metering_3~Datetime, col = "blue" )
legend("topright", lty= 1, col = c("Black", "red", "blue"), legend = c( "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(powerdata, Voltage~Datetime, type = "l", xlab = "datetime", ylab = "Voltage")
plot(powerdata, Global_reactive_power~Datetime, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
par(mfcol = c(2,2))
plot(powerdata, Global_active_power~Datetime, type = "l", xlab = "", ylab = "Global Active Power(kilowatts)")
plot(powerdata, Sub_metering_1~Datetime, type = "l", xlab = "", ylab = "Energy sub metering")
lines(powerdata,Sub_metering_2~Datetime, col = "red" )
lines(powerdata,Sub_metering_3~Datetime, col = "blue" )
legend("topright", lty= 1, col = c("Black", "red", "blue"), legend = c( "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(powerdata, Voltage~Datetime, type = "l", xlab = "datetime", ylab = "Voltage")
plot(powerdata, Global_reactive_power~Datetime, type = "l", ylab = "Global_reactive_power")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(powerdata, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
dev.copy(png, file="plot4.png", height=680, width=680)
dev.off()
powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
#powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
#powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
write.table(tidy_set, "./household_power_consumption.txt", row.name=FALSE)
#powerdata <- read.table("./household_power_consumption.txt", stringsAsFactors = FALSE, header = TRUE, sep =";"  )
#powerdata <- powerdata[powerdata$Date %in% c("1/2/2007","2/2/2007") ,]
write.table(powerdata, "./household_power_consumption.txt", row.name=FALSE)
