

> library('swirl')

| Hi! I see that you have some variables saved in your workspace. To keep things running smoothly, I recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your workspace. Then, type rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself something unique.

What shall I call you? Nirdesh

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers       4: Vectors                    5: Missing Values          
 6: Subsetting Vectors         7: Matrices and Data Frames   8: Logic                      9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data           13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 11
  |                                                                                                                                             |   0%

| In the last lesson, you learned about the two most fundamental members of R's *apply family of functions: lapply() and sapply(). Both take a list as
| input, apply a function to each element of the list, then combine and return the result. lapply() always returns a list, whereas sapply() attempts
| to simplify the result.

...
  |======                                                                                                                                       |   4%
| In this lesson, you'll learn how to use vapply() and tapply(), each of which serves a very specific purpose within the Split-Apply-Combine
| methodology. For consistency, we'll use the same dataset we used in the 'lapply and sapply' lesson.

...
  |===========                                                                                                                                  |   8%
| The Flags dataset from the UCI Machine Learning Repository contains details of various nations and their flags. More information may be found here:
| http://archive.ics.uci.edu/ml/datasets/Flags

...
  |=================                                                                                                                            |  12%
| I've stored the data in a variable called flags. If it's been a while since you completed the 'lapply and sapply' lesson, you may want to reacquaint
| yourself with the data by using functions like dim(), head(), str(), and summary() when you return to the prompt (>). You can also type viewinfo()
| at the prompt to bring up some documentation for the dataset. Let's get started!

...
  |=======================                                                                                                                      |  16%
| As you saw in the last lesson, the unique() function returns a vector of the unique values contained in the object passed to it. Therefore,
| sapply(flags, unique) returns a list containing one vector of unique values for each column of the flags dataset. Try it again now.

> str(flags)
'data.frame':	194 obs. of  30 variables:
 $ name      : Factor w/ 194 levels "Afghanistan",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ landmass  : int  5 3 4 6 3 4 1 1 2 2 ...
 $ zone      : int  1 1 1 3 1 2 4 4 3 3 ...
 $ area      : int  648 29 2388 0 0 1247 0 0 2777 2777 ...
 $ population: int  16 3 20 0 0 7 0 0 28 28 ...
 $ language  : int  10 6 8 1 6 10 1 1 2 2 ...
 $ religion  : int  2 6 2 1 0 5 1 1 0 0 ...
 $ bars      : int  0 0 2 0 3 0 0 0 0 0 ...
 $ stripes   : int  3 0 0 0 0 2 1 1 3 3 ...
 $ colours   : int  5 3 3 5 3 3 3 5 2 3 ...
 $ red       : int  1 1 1 1 1 1 0 1 0 0 ...
 $ green     : int  1 0 1 0 0 0 0 0 0 0 ...
 $ blue      : int  0 0 0 1 1 0 1 1 1 1 ...
 $ gold      : int  1 1 0 1 1 1 0 1 0 1 ...
 $ white     : int  1 0 1 1 0 0 1 1 1 1 ...
 $ black     : int  1 1 0 0 0 1 0 1 0 0 ...
 $ orange    : int  0 0 0 1 0 0 1 0 0 0 ...
 $ mainhue   : Factor w/ 8 levels "black","blue",..: 5 7 5 2 4 7 8 7 2 2 ...
 $ circles   : int  0 0 0 0 0 0 0 0 0 0 ...
 $ crosses   : int  0 0 0 0 0 0 0 0 0 0 ...
 $ saltires  : int  0 0 0 0 0 0 0 0 0 0 ...
 $ quarters  : int  0 0 0 0 0 0 0 0 0 0 ...
 $ sunstars  : int  1 1 1 0 0 1 0 1 0 1 ...
 $ crescent  : int  0 0 1 0 0 0 0 0 0 0 ...
 $ triangle  : int  0 0 0 1 0 0 0 1 0 0 ...
 $ icon      : int  1 0 0 1 0 1 0 0 0 0 ...
 $ animate   : int  0 1 0 1 0 0 1 0 0 0 ...
 $ text      : int  0 0 0 0 0 0 0 0 0 0 ...
 $ topleft   : Factor w/ 7 levels "black","blue",..: 1 6 4 2 2 6 7 1 2 2 ...
 $ botright  : Factor w/ 8 levels "black","blue",..: 5 7 8 7 7 1 2 7 2 2 ...

| Not quite right, but keep trying. Or, type info() for more options.

| Use sapply(flags, unique) to return a list containing one vector of unique values for each column of the flags dataset.

> summary(flags)
             name        landmass          zone            area           population         language        religion          bars       
 Afghanistan   :  1   Min.   :1.000   Min.   :1.000   Min.   :    0.0   Min.   :   0.00   Min.   : 1.00   Min.   :0.000   Min.   :0.0000  
 Albania       :  1   1st Qu.:3.000   1st Qu.:1.000   1st Qu.:    9.0   1st Qu.:   0.00   1st Qu.: 2.00   1st Qu.:1.000   1st Qu.:0.0000  
 Algeria       :  1   Median :4.000   Median :2.000   Median :  111.0   Median :   4.00   Median : 6.00   Median :1.000   Median :0.0000  
 American-Samoa:  1   Mean   :3.572   Mean   :2.211   Mean   :  700.0   Mean   :  23.27   Mean   : 5.34   Mean   :2.191   Mean   :0.4536  
 Andorra       :  1   3rd Qu.:5.000   3rd Qu.:4.000   3rd Qu.:  471.2   3rd Qu.:  14.00   3rd Qu.: 9.00   3rd Qu.:4.000   3rd Qu.:0.0000  
 Angola        :  1   Max.   :6.000   Max.   :4.000   Max.   :22402.0   Max.   :1008.00   Max.   :10.00   Max.   :7.000   Max.   :5.0000  
 (Other)       :188                                                                                                                       
    stripes          colours           red             green             blue             gold            white            black           orange     
 Min.   : 0.000   Min.   :1.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.000   Min.   :0.000  
 1st Qu.: 0.000   1st Qu.:3.000   1st Qu.:1.0000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:1.0000   1st Qu.:0.000   1st Qu.:0.000  
 Median : 0.000   Median :3.000   Median :1.0000   Median :0.0000   Median :1.0000   Median :0.0000   Median :1.0000   Median :0.000   Median :0.000  
 Mean   : 1.552   Mean   :3.464   Mean   :0.7887   Mean   :0.4691   Mean   :0.5103   Mean   :0.4691   Mean   :0.7526   Mean   :0.268   Mean   :0.134  
 3rd Qu.: 3.000   3rd Qu.:4.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.:0.000  
 Max.   :14.000   Max.   :8.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.000   Max.   :1.000  
                                                                                                                                                      
    mainhue      circles          crosses          saltires          quarters         sunstars         crescent         triangle           icon       
 red    :71   Min.   :0.0000   Min.   :0.0000   Min.   :0.00000   Min.   :0.0000   Min.   : 0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  
 blue   :40   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.: 0.000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  
 green  :31   Median :0.0000   Median :0.0000   Median :0.00000   Median :0.0000   Median : 0.000   Median :0.0000   Median :0.0000   Median :0.0000  
 white  :22   Mean   :0.1701   Mean   :0.1495   Mean   :0.09278   Mean   :0.1495   Mean   : 1.387   Mean   :0.0567   Mean   :0.1392   Mean   :0.2526  
 gold   :19   3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0.00000   3rd Qu.:0.0000   3rd Qu.: 1.000   3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:0.7500  
 black  : 5   Max.   :4.0000   Max.   :2.0000   Max.   :1.00000   Max.   :4.0000   Max.   :50.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
 (Other): 6                                                                                                                                           
    animate           text           topleft      botright 
 Min.   :0.000   Min.   :0.00000   black :12   red    :69  
 1st Qu.:0.000   1st Qu.:0.00000   blue  :43   blue   :47  
 Median :0.000   Median :0.00000   gold  : 6   green  :40  
 Mean   :0.201   Mean   :0.08247   green :32   white  :17  
 3rd Qu.:0.000   3rd Qu.:0.00000   orange: 4   black  : 9  
 Max.   :1.000   Max.   :1.00000   red   :56   gold   : 9  
                                   white :41   (Other): 3  

| That's not exactly what I'm looking for. Try again. Or, type info() for more options.

| Use sapply(flags, unique) to return a list containing one vector of unique values for each column of the flags dataset.

> sapply(flags, unique) 
$name
  [1] Afghanistan              Albania                  Algeria                  American-Samoa           Andorra                 
  [6] Angola                   Anguilla                 Antigua-Barbuda          Argentina                Argentine               
 [11] Australia                Austria                  Bahamas                  Bahrain                  Bangladesh              
 [16] Barbados                 Belgium                  Belize                   Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                  Botswana                 Brazil                   British-Virgin-Isles    
 [26] Brunei                   Bulgaria                 Burkina                  Burma                    Burundi                 
 [31] Cameroon                 Canada                   Cape-Verde-Islands       Cayman-Islands           Central-African-Republic
 [36] Chad                     Chile                    China                    Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands             Costa-Rica               Cuba                     Cyprus                  
 [46] Czechoslovakia           Denmark                  Djibouti                 Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                    El-Salvador              Equatorial-Guinea        Ethiopia                
 [56] Faeroes                  Falklands-Malvinas       Fiji                     Finland                  France                  
 [61] French-Guiana            French-Polynesia         Gabon                    Gambia                   Germany-DDR             
 [66] Germany-FRG              Ghana                    Gibraltar                Greece                   Greenland               
 [71] Grenada                  Guam                     Guatemala                Guinea                   Guinea-Bissau           
 [76] Guyana                   Haiti                    Honduras                 Hong-Kong                Hungary                 
 [81] Iceland                  India                    Indonesia                Iran                     Iraq                    
 [86] Ireland                  Israel                   Italy                    Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                   Kampuchea                Kenya                    Kiribati                
 [96] Kuwait                   Laos                     Lebanon                  Lesotho                  Liberia                 
[101] Libya                    Liechtenstein            Luxembourg               Malagasy                 Malawi                  
[106] Malaysia                 Maldive-Islands          Mali                     Malta                    Marianas                
[111] Mauritania               Mauritius                Mexico                   Micronesia               Monaco                  
[116] Mongolia                 Montserrat               Morocco                  Mozambique               Nauru                   
[121] Nepal                    Netherlands              Netherlands-Antilles     New-Zealand              Nicaragua               
[126] Niger                    Nigeria                  Niue                     North-Korea              North-Yemen             
[131] Norway                   Oman                     Pakistan                 Panama                   Papua-New-Guinea        
[136] Parguay                  Peru                     Philippines              Poland                   Portugal                
[141] Puerto-Rico              Qatar                    Romania                  Rwanda                   San-Marino              
[146] Sao-Tome                 Saudi-Arabia             Senegal                  Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands          Somalia                  South-Africa             South-Korea             
[156] South-Yemen              Spain                    Sri-Lanka                St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent               Sudan                    Surinam                  Swaziland               
[166] Sweden                   Switzerland              Syria                    Taiwan                   Tanzania                
[171] Thailand                 Togo                     Tonga                    Trinidad-Tobago          Tunisia                 
[176] Turkey                   Turks-Cocos-Islands      Tuvalu                   UAE                      Uganda                  
[181] UK                       Uruguay                  US-Virgin-Isles          USA                      USSR                    
[186] Vanuatu                  Vatican-City             Venezuela                Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                    Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra Angola Anguilla Antigua-Barbuda Argentina Argentine Australia Austria ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31    23   113    47  1099   600  8512     6   111   274   678    28   474
 [25]  9976     4   623  1284   757  9561  1139     2   342    51   115     9   128    43    22    49   284  1001    21  1222    12    18   337   547
 [49]    91   268    10   108   249   239   132  2176   109   246    36   215   112    93   103  3268  1904  1648   435    70   301   323    11   372
 [73]    98   181   583   236    30  1760     3   587   118   333  1240  1031  1973  1566   447   783   140    41  1267   925   121   195   324   212
 [97]   804    76   463   407  1285   300   313    92   237    26  2150   196    72   637  1221    99   288   505    66  2506    63    17   450   185
[121]   945   514    57     5   164   781   245   178  9363 22402    15   912   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35    4   24    2   11 1008    5   47   31   54   17   61   14  684  157
[30]   39   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| You got it right!
  |============================                                                                                                                 |  20%
| What if you had forgotten how unique() works and mistakenly thought it returns the *number* of unique values contained in the object passed to it?
| Then you might have incorrectly expected sapply(flags, unique) to return a numeric vector, since each element of the list returned would contain a
| single number and sapply() could then simplify the result to a vector.

...
  |==================================                                                                                                           |  24%
| When working interactively (at the prompt), this is not much of a problem, since you see the result immediately and will quickly recognize your
| mistake. However, when working non-interactively (e.g. writing your own functions), a misunderstanding may go undetected and cause incorrect results
| later on. Therefore, you may wish to be more careful and that's where vapply() is useful.

...
  |=======================================                                                                                                      |  28%
| Whereas sapply() tries to 'guess' the correct format of the result, vapply() allows you to specify it explicitly. If the result doesn't match the
| format you specify, vapply() will throw an error, causing the operation to stop. This can prevent significant problems in your code that might be
| caused by getting unexpected return values from sapply().

...
  |=============================================                                                                                                |  32%
| Try vapply(flags, unique, numeric(1)), which says that you expect each element of the result to be a numeric vector of length 1. Since this is NOT
| actually the case, YOU WILL GET AN ERROR. Once you get the error, type ok() to continue to the next question.

> vapply(flags, unique, numeric(1)) 
Error in vapply(flags, unique, numeric(1)) : values must be length 1,
 but FUN(X[[1]]) result is length 194
> ok()

| Excellent job!
  |===================================================                                                                                          |  36%
| Recall from the previous lesson that sapply(flags, class) will return a character vector containing the class of each column in the dataset. Try
| that again now to see the result.

> sapply(flags, class)
      name   landmass       zone       area population   language   religion       bars    stripes    colours        red      green       blue 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
      gold      white      black     orange    mainhue    circles    crosses   saltires   quarters   sunstars   crescent   triangle       icon 
 "integer"  "integer"  "integer"  "integer"   "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
   animate       text    topleft   botright 
 "integer"  "integer"   "factor"   "factor" 

| Excellent work!
  |========================================================                                                                                     |  40%
| If we wish to be explicit about the format of the result we expect, we can use vapply(flags, class, character(1)). The 'character(1)' argument tells
| R that we expect the class function to return a character vector of length 1 when applied to EACH column of the flags dataset. Try it now.

> vapply(flags, class, character(1))
      name   landmass       zone       area population   language   religion       bars    stripes    colours        red      green       blue 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
      gold      white      black     orange    mainhue    circles    crosses   saltires   quarters   sunstars   crescent   triangle       icon 
 "integer"  "integer"  "integer"  "integer"   "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
   animate       text    topleft   botright 
 "integer"  "integer"   "factor"   "factor" 

| That's a job well done!
  |==============================================================                                                                               |  44%
| Note that since our expectation was correct (i.e. character(1)), the vapply() result is identical to the sapply() result -- a character vector of
| column classes.

...
  |====================================================================                                                                         |  48%
| You might think of vapply() as being 'safer' than sapply(), since it requires you to specify the format of the output in advance, instead of just
| allowing R to 'guess' what you wanted. In addition, vapply() may perform faster than sapply() for large datasets. However, when doing data analysis
| interactively (at the prompt), sapply() saves you some typing and will often be good enough.

...
  |=========================================================================                                                                    |  52%
| As a data analyst, you'll often wish to split your data up into groups based on the value of some variable, then apply a function to the members of
| each group. The next function we'll look at, tapply(), does exactly that.

...
  |===============================================================================                                                              |  56%
| Use ?tapply to pull up the documentation.

> ?tapply
starting httpd help server ... done

| That's correct!
  |=====================================================================================                                                        |  60%
| The 'landmass' variable in our dataset takes on integer values between 1 and 6, each of which represents a different part of the world. Use
| table(flags$landmass) to see how many flags/countries fall into each group.

> table(flags$landmass) 

 1  2  3  4  5  6 
31 17 35 52 39 20 

| That's a job well done!
  |==========================================================================================                                                   |  64%
| The 'animate' variable in our dataset takes the value 1 if a country's flag contains an animate image (e.g. an eagle, a tree, a human hand) and 0
| otherwise. Use table(flags$animate) to see how many flags contain an animate image.

> table(flags$animate)  

  0   1 
155  39 

| You got it!
  |================================================================================================                                             |  68%
| This tells us that 39 flags contain an animate object (animate = 1) and 155 do not (animate = 0).

...
  |======================================================================================================                                       |  72%
| If you take the arithmetic mean of a bunch of 0s and 1s, you get the proportion of 1s. Use tapply(flags$animate, flags$landmass, mean) to apply the
| mean function to the 'animate' variable separately for each of the six landmass groups, thus giving us the proportion of flags containing an animate
| image WITHIN each landmass group.

> tapply(flags$animate, flags$landmass, mean) 
        1         2         3         4         5         6 
0.4193548 0.1764706 0.1142857 0.1346154 0.1538462 0.3000000 

| That's the answer I was looking for.
  |===========================================================================================================                                  |  76%
| The first landmass group (landmass = 1) corresponds to North America and contains the highest proportion of flags with an animate image (0.4194).

...
  |=================================================================================================================                            |  80%
| Similarly, we can look at a summary of population values (in round millions) for countries with and without the color red on their flag with
| tapply(flags$population, flags$red, summary).

>  tapply(flags$population, flags$red, summary)
$`0`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    3.00   27.63    9.00  684.00 

$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    0.0     0.0     4.0    22.1    15.0  1008.0 


| Nice work!
  |======================================================================================================================                       |  84%
| What is the median population (in millions) for countries *without* the color red on their flag?

1: 4.0
2: 9.0
3: 0.0
4: 27.6
5: 3.0
6: 22.1

Selection: 5

| Excellent work!
  |============================================================================================================================                 |  88%
| Lastly, use the same approach to look at a summary of population values for each of the six landmasses.

> 
>  tapply(flags$population, flags$landmass, summary)
$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   12.29    4.50  231.00 

$`2`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    1.00    6.00   15.71   15.00  119.00 

$`3`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    8.00   13.86   16.00   61.00 

$`4`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   1.000   5.000   8.788   9.750  56.000 

$`5`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    2.00   10.00   69.18   39.00 1008.00 

$`6`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   11.30    1.25  157.00 


| Nice work!
  |==================================================================================================================================           |  92%
| What is the maximum population (in millions) for the fourth landmass group (Africa)?

1: 56.00
2: 1010.0
3: 119.0
4: 5.00
5: 157.00

Selection: 1

| Great job!
  |=======================================================================================================================================      |  96%
| In this lesson, you learned how to use vapply() as a safer alternative to sapply(), which is most helpful when writing your own functions. You also
| learned how to use tapply() to split your data into groups based on the value of some variable, then apply a function to each group. These functions
| will come in handy on your quest to become a better data analyst.

...
  |=============================================================================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? nbhand14@earlham.edu
What is your assignment token? oiPdzO6IPBM6b8kn
Grade submission succeeded!

| That's a job well done!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 