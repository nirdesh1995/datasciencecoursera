
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.70 (7463) x86_64-apple-darwin15.6.0]

[Workspace restored from /Users/nirdeshbhandari/.RData]
[History restored from /Users/nirdeshbhandari/.Rapp.history]

> library('swirl')

| Hi! I see that you have some variables saved in your workspace. To keep things running smoothly, I recommend you clean up before starting
| swirl.

| Type ls() to see a list of the variables in your workspace. Then, type rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> siwrl()
Error in siwrl() : could not find function "siwrl"
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself something
| unique.

What shall I call you? Nirdesh

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors         7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics             

Selection: 13
  |                                                                                                                                     |   0%

| One of the great advantages of using a statistical programming language like R is its vast collection of tools for simulating random
| numbers.

...
  |====                                                                                                                                 |   3%
| This lesson assumes familiarity with a few common probability distributions, but these topics will only be discussed with respect to random
| number generation. Even if you have no prior experience with these concepts, you should be able to complete the lesson and understand the
| main ideas.

...
  |========                                                                                                                             |   6%
| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the documentation.

> ?sample
starting httpd help server ... done

| That's correct!
  |============                                                                                                                         |   9%
| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 1 5 6 6

| That's the answer I was looking for.
  |================                                                                                                                     |  12%
| Now repeat the command to see how your result differs. (The probability of rolling the exact same result is (1/6)^4 = 0.00077, which is
| pretty small!)

> sample(1:6, 4, replace = TRUE) 
[1] 1 2 1 3

| Nice work!
  |====================                                                                                                                 |  15%
| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH replacement. Sampling with replacement
| simply means that each number is "replaced" after it is selected, so that the same number can show up more than once. This is what we want
| here, since what you roll on one die shouldn't affect what you roll on any of the others.

...
  |========================                                                                                                             |  18%
| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave off the 'replace' argument.

> sample(1:20, 10)
 [1]  1 10 15 17 13  8  6  2 12 16

| You got it right!
  |============================                                                                                                         |  21%
| Since the last command sampled without replacement, no number appears more than once in the output.

...
  |================================                                                                                                     |  24%
| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a look at it now.

> LETTERs
Error: object 'LETTERs' not found
> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

| You're the best!
  |====================================                                                                                                 |  27%
| The sample() function can also be used to permute, or rearrange, the elements of a vector. For example, try sample(LETTERS) to permute all
| 26 letters of the English alphabet.

> sample(LETTERS)
 [1] "W" "C" "G" "O" "N" "U" "T" "S" "J" "H" "Z" "B" "Q" "P" "Y" "A" "L" "I" "D" "K" "F" "X" "V" "E" "M" "R"

| You got it right!
  |========================================                                                                                             |  30%
| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument to sample() is not specified, R
| takes a sample equal in size to the vector from which you are sampling.

...
  |============================================                                                                                         |  33%
| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3 probability of landing 'tails' and a
| 0.7 probability of landing 'heads'.

...
  |================================================                                                                                     |  36%
| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100 from the vector c(0,1), with
| replacement. Since the coin is unfair, we must attach specific probabilities to the values 0 (tails) and 1 (heads) with a fourth argument,
| prob = c(0.3, 0.7). Assign the result to a new variable called flips.

> sample(c(0,1),100, replace=TRUE, prob= c(0.3,0.7))
  [1] 0 1 1 0 1 0 1 1 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 0 1 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 0 1 1 1 0 1 1 0 0
 [70] 1 1 1 0 0 0 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1

| Not quite right, but keep trying. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the result: flips <- sample(c(0,1), 100, replace = TRUE, prob =
| c(0.3, 0.7))

> flips <- sample(c(0,1),100, replace=TRUE, prob= c(0.3,0.7))

| That's correct!
  |====================================================                                                                                 |  39%
| View the contents of the flips variable.

> flips
  [1] 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1
 [70] 1 0 1 0 1 1 0 0 0 0 0 1 0 0 1 1 1 0 1 1 1 1 0 0 1 1 1 1 0 1 0

| You are really on a roll!
  |========================================================                                                                             |  42%
| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our coin flips to have the value
| 1. Count the actual number of 1s contained in flips using the sum() function.

> sum(flips,1)
[1] 71

| Not quite right, but keep trying. Or, type info() for more options.

| sum(flips) will add up all the 1s and 0s, giving you the total number of 1s in flips.

> sum(flips)
[1] 70

| Perseverance, that's the answer.
  |============================================================                                                                         |  45%
| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we can use rbinom() to simulate a
| binomial random variable. Pull up the documentation for rbinom() using ?rbinom.

> ?rbinom 

| Keep up the great work!
  |================================================================                                                                     |  48%
| Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"), a p*** (for "probability"), and
| q*** (for "quantile"). We are most interested in the r*** functions in this lesson, but I encourage you to explore the others on your own.

...
  |=====================================================================                                                                |  52%
| A binomial random variable represents the number of 'successes' (heads) in a given number of independent 'trials' (coin flips). Therefore,
| we can generate a single random variable that represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100,
| prob = 0.7). Note that you only specify the probability of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.

> rbinom(1,size=100, prob=0.7)
[1] 66

| Excellent work!
  |=========================================================================                                                            |  55%
| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1, with success probability of 0.7. Give
| it a try, assigning the result to a new variable called flips2.

> flips2 <- rbinom(1,size=100 ,prob=0.7)

| Give it another try. Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2 <- rbinom(100,size=1 ,prob=0.7)

| Nice work!
  |=============================================================================                                                        |  58%
| View the contents of flips2.

> flips2
  [1] 0 1 0 0 1 1 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0 1 1 1 0 1 1
 [70] 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 0 1 1 0 0 1 1 1 0 0 0 1

| Perseverance, that's the answer.
  |=================================================================================                                                    |  61%
| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 66

| That's a job well done!
  |=====================================================================================                                                |  64%
| Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions. Pull up the documentation for
| rnorm() now.

> ?rnorm

| You're the best!
  |=========================================================================================                                            |  67%
| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage' section in the documentation, the
| default values for the 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10 random numbers from
| a standard normal distribution. Give it a try.

> rnorm(10)
 [1]  0.4907473  1.9720584 -0.7392976 -1.4150589 -1.7320778 -1.5984262 -0.6936200 -0.5156442  0.2207340 -0.1423864

| Perseverance, that's the answer.
  |=============================================================================================                                        |  70%
| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, 25,100 )
 [1]  -56.3270564  219.9803455 -108.5300576 -169.2927109  162.6062914   83.6324397  153.5670635  -82.5968066  124.5636194   -0.7649515

| One more time. You can do it! Or, type info() for more options.

| Use rnorm(10, mean = 100, sd = 25) to generate 10 random numbers from a normal distribution with mean 100 and standard deviation 25.

> rnorm(10, sd =25, mean= 100 )
 [1]  94.78793 111.03455 103.82968  32.87560  57.12472  96.09786  81.01718 112.32668  89.72771  64.50661

| You are doing so well!
  |=================================================================================================                                    |  73%
| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated from a Poisson distribution with
| mean 10? Let's start with one group of 5 numbers, then I'll show you how to repeat the operation 100 times in a convenient and compact way.

...
  |=====================================================================================================                                |  76%
| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for rpois() if you need help.

> ?rpois
> rpois(5,10)
[1] 14 11 11  9  8

| That's correct!
  |=========================================================================================================                            |  79%
| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new variable called my_pois.

> my_pois <- replicate(100, rpois(5, 10))

| That's a job well done!
  |=============================================================================================================                        |  82%
| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24]
[1,]    7   12    6    8   15    7   13   15    9     9    10     5    13    10    15    13     8    16    11     9    16    10     7    10
[2,]    8    9    4    8    9   14   15    6    8    10    12     9     7     7     9    10    11     9    12    19    11    13     8    11
[3,]   13    9    8    9   10    8   10    9    9    11    11    15     8    16     8    15     8     5     6     3     9    10     5     7
[4,]   10    7    8   10    8    6    9   10   10     9    11    10     9    12    12     9    11     9    10    12    10    13    11     9
[5,]   14   10   12   13   15   11   14    8    8    13    11     4    10     6     9     5     8    14     8    10    12    13     8    12
     [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47]
[1,]    15     5    17     6     7    11    10     6     5     8    11    11     4    12     6    12    15    14    10     4     9    14    11
[2,]     9     7     9     7    14    11    14    10    13    12    10    11    12    10     6    12     7     8     9    12    10    11     9
[3,]    11     8     7     7     8    10     8    17    11    12     6    14    13     7     8     8     9     7    11    12     6     6     6
[4,]     4     8     6     7    12    14     9     7     9    10    10     9     7    12    12    10    12     9     5     8    10     9     6
[5,]    12    12    12    11    12    11     9    13    12    14     8     5     8    15     8    13     6     5    12     7     9    15    15
     [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70]
[1,]    11     7    15    15    11     7     5     7     7     7     8     9     7    12    14    12    14    12     8    14    12     9    12
[2,]    14     8     9    12     8    11    10     4    11    11     9    13     8    14    11     6     9    10     4     9     6     7    13
[3,]     7     9     7    10     4    14    15    10     7     5    17     5    10     5    11    10    12     9    13     7    12     3    11
[4,]    12    13    12    10     4     8     8     7     7    11    12    13    11    13     7    10    17     6     5    13     8    13    14
[5,]    11     8    10     9    17     8    11     8    12    12    11    11     6     9    11    20    11     9    13     4     8    10    15
     [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93]
[1,]    12    11    11     8     7    15    11    10    10    10     8    13    17     9     9    13    10     9     6    12    12    10    14
[2,]    13     6     8    13    14     9    10     9     4     7    10    11     9     5     7     8     6    13     8    13    13     9     9
[3,]     6    11     4    11     8    16     4    12     9    11     9     9    11     8    12    12    12    16     6    22    15    11     8
[4,]    13    10     8     6    11    11     8    10     8    15     4     9     5     6     5    12     3    12    11    15    15    12     5
[5,]    11     8     8     8     7     7    12     9    11    14    10    15     8    14     9     5     8     5    10    11     8     5     8
     [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]     9     9     8     9     3     7     11
[2,]     8     8     9     6    11     5     11
[3,]    11    12    11    12    12    15     11
[4,]     7    14     7     7    12    10      6
[5,]     8     6    11     9     8    17     13

| You are really on a roll!
  |=================================================================================================================                    |  85%
| replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson distribution with mean 10. Now we can
| find the mean of each column in my_pois using the colMeans() function. Store the result in a variable called cm.

> cm <- colMeans(my_pois)

| That's correct!
  |=====================================================================================================================                |  88%
| And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).

> hist(cm)

| Nice work!
  |=========================================================================================================================            |  91%
| Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at work, but that's a lesson for
| another day!

...
  |=============================================================================================================================        |  94%
| All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared (rchisq()), gamma (rgamma()),
| .... Well, you see the pattern.

...
  |=================================================================================================================================    |  97%
| Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I encourage you to explore these and
| other functions further on your own.

...
  |=====================================================================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? nbhand14@earlham.edu
What is your assignment token? HGSJVFsckwweGmJs
Grade submission succeeded!

| Nice work!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 