
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.70 (7463) x86_64-apple-darwin15.6.0]

[Workspace restored from /Users/nirdeshbhandari/.RData]
[History restored from /Users/nirdeshbhandari/.Rapp.history]

> library('swirl')

| Hi! I see that you have some variables saved in your workspace. To keep things running smoothly, I recommend you clean up before starting
| swirl.

| Type ls() to see a list of the variables in your workspace. Then, type rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself something
| unique.

What shall I call you? Nirdesh

| Please choose a course, or type 0 to exit swirl.

1: Getting and Cleaning Data
2: R Programming
3: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Manipulating Data with dplyr
2: Grouping and Chaining with dplyr
3: Tidying Data with tidyr
4: Dates and Times with lubridate

Selection: 2

| Attempting to load lesson dependencies...

| Package ‘dplyr’ loaded correctly!

  |                                                                                                                                     |   0%

| Warning: This lesson makes use of the View() function. View() may not work properly in every programming environment. We highly recommend
| the use of RStudio for this lesson.

...
  |===                                                                                                                                  |   2%
| In the last lesson, you learned about the five main data manipulation 'verbs' in dplyr: select(), filter(), arrange(), mutate(), and
| summarize(). The last of these, summarize(), is most powerful when applied to grouped data.

...
  |=====                                                                                                                                |   4%
| The main idea behind grouping data is that you want to break up your dataset into groups of rows based on the values of one or more
| variables. The group_by() function is reponsible for doing this.

...
  |========                                                                                                                             |   6%
| We'll continue where we left off with RStudio's CRAN download log from July 8, 2014, which contains information on roughly 225,000 R package
| downloads (http://cran-logs.rstudio.com/).

...
  |==========                                                                                                                           |   8%
| As with the last lesson, the dplyr package was automatically installed (if necessary) and loaded at the beginning of this lesson. Normally,
| this is something you would have to do on your own. Just to build the habit, type library(dplyr) now to load the package again.

> library(dplyr)

| That's correct!
  |=============                                                                                                                        |  10%
| I've made the dataset available to you in a data frame called mydf. Put it in a 'data frame tbl' using the tbl_df() function and store the
| result in a object called cran. If you're not sure what I'm talking about, you should start with the previous lesson. Otherwise, practice
| makes perfect!

> cran<- tbldf(mydf)
Error in tbldf(mydf) : could not find function "tbldf"
> cran<- tbl_df(mydf)

| Keep working like that and you'll get there!
  |===============                                                                                                                      |  12%
| To avoid confusion and keep things running smoothly, let's remove the original dataframe from your workspace with rm("mydf").

> rm("mydf")

| You got it right!
  |==================                                                                                                                   |  13%
| Print cran to the console.

> cran
# A tibble: 225,468 x 11
       X date       time        size r_version r_arch r_os      package      version country ip_id
   <int> <chr>      <chr>      <int> <chr>     <chr>  <chr>     <chr>        <chr>   <chr>   <int>
 1     1 2014-07-08 00:54:41   80589 3.1.0     x86_64 mingw32   htmltools    0.2.4   US          1
 2     2 2014-07-08 00:59:53  321767 3.1.0     x86_64 mingw32   tseries      0.10-32 US          2
 3     3 2014-07-08 00:47:13  748063 3.1.0     x86_64 linux-gnu party        1.0-15  US          3
 4     4 2014-07-08 00:48:05  606104 3.1.0     x86_64 linux-gnu Hmisc        3.14-4  US          3
 5     5 2014-07-08 00:46:50   79825 3.0.2     x86_64 linux-gnu digest       0.6.4   CA          4
 6     6 2014-07-08 00:48:04   77681 3.1.0     x86_64 linux-gnu randomForest 4.6-7   US          3
 7     7 2014-07-08 00:48:35  393754 3.1.0     x86_64 linux-gnu plyr         1.8.1   US          3
 8     8 2014-07-08 00:47:30   28216 3.0.2     x86_64 linux-gnu whisker      0.3-2   US          5
 9     9 2014-07-08 00:54:58    5928 <NA>      <NA>   <NA>      Rcpp         0.10.4  CN          6
10    10 2014-07-08 00:15:35 2206029 3.0.2     x86_64 linux-gnu hflights     0.1     US          7
# ... with 225,458 more rows
Error in dynGet("__LoadingNamespaceInfo__", stop("not loading a namespace")) : 
  not loading a namespace
> 
> cran
# A tibble: 225,468 x 11
       X date       time        size r_version r_arch r_os      package      version country ip_id
   <int> <chr>      <chr>      <int> <chr>     <chr>  <chr>     <chr>        <chr>   <chr>   <int>
 1     1 2014-07-08 00:54:41   80589 3.1.0     x86_64 mingw32   htmltools    0.2.4   US          1
 2     2 2014-07-08 00:59:53  321767 3.1.0     x86_64 mingw32   tseries      0.10-32 US          2
 3     3 2014-07-08 00:47:13  748063 3.1.0     x86_64 linux-gnu party        1.0-15  US          3
 4     4 2014-07-08 00:48:05  606104 3.1.0     x86_64 linux-gnu Hmisc        3.14-4  US          3
 5     5 2014-07-08 00:46:50   79825 3.0.2     x86_64 linux-gnu digest       0.6.4   CA          4
 6     6 2014-07-08 00:48:04   77681 3.1.0     x86_64 linux-gnu randomForest 4.6-7   US          3
 7     7 2014-07-08 00:48:35  393754 3.1.0     x86_64 linux-gnu plyr         1.8.1   US          3
 8     8 2014-07-08 00:47:30   28216 3.0.2     x86_64 linux-gnu whisker      0.3-2   US          5
 9     9 2014-07-08 00:54:58    5928 <NA>      <NA>   <NA>      Rcpp         0.10.4  CN          6
10    10 2014-07-08 00:15:35 2206029 3.0.2     x86_64 linux-gnu hflights     0.1     US          7
# ... with 225,458 more rows
> 
> mydf
Error: object 'mydf' not found
> cran
# A tibble: 225,468 x 11
       X date       time        size r_version r_arch r_os      package      version country ip_id
   <int> <chr>      <chr>      <int> <chr>     <chr>  <chr>     <chr>        <chr>   <chr>   <int>
 1     1 2014-07-08 00:54:41   80589 3.1.0     x86_64 mingw32   htmltools    0.2.4   US          1
 2     2 2014-07-08 00:59:53  321767 3.1.0     x86_64 mingw32   tseries      0.10-32 US          2
 3     3 2014-07-08 00:47:13  748063 3.1.0     x86_64 linux-gnu party        1.0-15  US          3
 4     4 2014-07-08 00:48:05  606104 3.1.0     x86_64 linux-gnu Hmisc        3.14-4  US          3
 5     5 2014-07-08 00:46:50   79825 3.0.2     x86_64 linux-gnu digest       0.6.4   CA          4
 6     6 2014-07-08 00:48:04   77681 3.1.0     x86_64 linux-gnu randomForest 4.6-7   US          3
 7     7 2014-07-08 00:48:35  393754 3.1.0     x86_64 linux-gnu plyr         1.8.1   US          3
 8     8 2014-07-08 00:47:30   28216 3.0.2     x86_64 linux-gnu whisker      0.3-2   US          5
 9     9 2014-07-08 00:54:58    5928 <NA>      <NA>   <NA>      Rcpp         0.10.4  CN          6
10    10 2014-07-08 00:15:35 2206029 3.0.2     x86_64 linux-gnu hflights     0.1     US          7
# ... with 225,458 more rows
> 
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself something
| unique.

What shall I call you? Nirdesh

| Would you like to continue with one of these lessons?

1: Getting and Cleaning Data Grouping and Chaining with dplyr
2: No. Let me start something new.

Selection: 1

| Attempting to load lesson dependencies...

| Package ‘dplyr’ loaded correctly!



| Print cran to the console.

> cran
# A tibble: 225,468 x 11
       X date       time        size r_version r_arch r_os      package      version country ip_id
   <int> <chr>      <chr>      <int> <chr>     <chr>  <chr>     <chr>        <chr>   <chr>   <int>
 1     1 2014-07-08 00:54:41   80589 3.1.0     x86_64 mingw32   htmltools    0.2.4   US          1
 2     2 2014-07-08 00:59:53  321767 3.1.0     x86_64 mingw32   tseries      0.10-32 US          2
 3     3 2014-07-08 00:47:13  748063 3.1.0     x86_64 linux-gnu party        1.0-15  US          3
 4     4 2014-07-08 00:48:05  606104 3.1.0     x86_64 linux-gnu Hmisc        3.14-4  US          3
 5     5 2014-07-08 00:46:50   79825 3.0.2     x86_64 linux-gnu digest       0.6.4   CA          4
 6     6 2014-07-08 00:48:04   77681 3.1.0     x86_64 linux-gnu randomForest 4.6-7   US          3
 7     7 2014-07-08 00:48:35  393754 3.1.0     x86_64 linux-gnu plyr         1.8.1   US          3
 8     8 2014-07-08 00:47:30   28216 3.0.2     x86_64 linux-gnu whisker      0.3-2   US          5
 9     9 2014-07-08 00:54:58    5928 <NA>      <NA>   <NA>      Rcpp         0.10.4  CN          6
10    10 2014-07-08 00:15:35 2206029 3.0.2     x86_64 linux-gnu hflights     0.1     US          7
# ... with 225,458 more rows

| Excellent job!
  |====================                                                                                                                 |  15%
| Our first goal is to group the data by package name. Bring up the help file for group_by().

> ?group_by
starting httpd help server ... done

| That's the answer I was looking for.
  |=======================                                                                                                              |  17%
| Group cran by the package variable and store the result in a new object called by_package.

> by_package <- group_by(cran, package)

| You are really on a roll!
  |==========================                                                                                                           |  19%
| Let's take a look at by_package. Print it to the console.

> by_package
# A tibble: 225,468 x 11
# Groups:   package [6,023]
       X date       time        size r_version r_arch r_os      package      version country ip_id
   <int> <chr>      <chr>      <int> <chr>     <chr>  <chr>     <chr>        <chr>   <chr>   <int>
 1     1 2014-07-08 00:54:41   80589 3.1.0     x86_64 mingw32   htmltools    0.2.4   US          1
 2     2 2014-07-08 00:59:53  321767 3.1.0     x86_64 mingw32   tseries      0.10-32 US          2
 3     3 2014-07-08 00:47:13  748063 3.1.0     x86_64 linux-gnu party        1.0-15  US          3
 4     4 2014-07-08 00:48:05  606104 3.1.0     x86_64 linux-gnu Hmisc        3.14-4  US          3
 5     5 2014-07-08 00:46:50   79825 3.0.2     x86_64 linux-gnu digest       0.6.4   CA          4
 6     6 2014-07-08 00:48:04   77681 3.1.0     x86_64 linux-gnu randomForest 4.6-7   US          3
 7     7 2014-07-08 00:48:35  393754 3.1.0     x86_64 linux-gnu plyr         1.8.1   US          3
 8     8 2014-07-08 00:47:30   28216 3.0.2     x86_64 linux-gnu whisker      0.3-2   US          5
 9     9 2014-07-08 00:54:58    5928 <NA>      <NA>   <NA>      Rcpp         0.10.4  CN          6
10    10 2014-07-08 00:15:35 2206029 3.0.2     x86_64 linux-gnu hflights     0.1     US          7
# ... with 225,458 more rows

| That's correct!
  |============================                                                                                                         |  21%
| At the top of the output above, you'll see 'Groups: package', which tells us that this tbl has been grouped by the package variable.
| Everything else looks the same, but now any operation we apply to the grouped data will take place on a per package basis.

...
  |===============================                                                                                                      |  23%
| Recall that when we applied mean(size) to the original tbl_df via summarize(), it returned a single number -- the mean of all values in the size column. We
| may care about what that number is, but wouldn't it be so much more interesting to look at the mean download size for each unique package?

...
  |=================================                                                                                                    |  25%
| That's exactly what you'll get if you use summarize() to apply mean(size) to the grouped data in by_package. Give it a shot.

> summarize(by_package, mean(size))
# A tibble: 6,023 x 2
   package     `mean(size)`
   <chr>              <dbl>
 1 A3                62195.
 2 abc             4826665.
 3 abcdeFBA         455980.
 4 ABCExtremes       22904.
 5 ABCoptim          17807.
 6 ABCp2             30473.
 7 abctools        2589394.
 8 abd              453631.
 9 abf2              35693.
10 abind             32939.
# ... with 6,013 more rows

| That's a job well done!
  |====================================                                                                                                 |  27%
| Instead of returning a single value, summarize() now returns the mean size for EACH package in our dataset.

...
  |======================================                                                                                               |  29%
| Let's take it a step further. I just opened an R script for you that contains a partially constructed call to summarize(). Follow the instructions in the
| script comments.
| 
| When you are ready to move on, save the script and type submit(), or type reset() to reset the script to its original state.

> submit()

| Sourcing your script...


| You got it!
  |=========================================                                                                                            |  31%
| Print the resulting tbl, pack_sum, to the console to examine its contents.

> pack_sum
# A tibble: 6,023 x 5
   package     count unique countries avg_bytes
   <chr>       <int>  <int>     <int>     <dbl>
 1 A3             25     24        10    62195.
 2 abc            29     25        16  4826665.
 3 abcdeFBA       15     15         9   455980.
 4 ABCExtremes    18     17         9    22904.
 5 ABCoptim       16     15         9    17807.
 6 ABCp2          18     17        10    30473.
 7 abctools       19     19        11  2589394.
 8 abd            17     16        10   453631.
 9 abf2           13     13         9    35693.
10 abind         396    365        50    32939.
# ... with 6,013 more rows

| That's the answer I was looking for.
  |===========================================                                                                                          |  33%
| The 'count' column, created with n(), contains the total number of rows (i.e. downloads) for each package. The 'unique' column, created with
| n_distinct(ip_id), gives the total number of unique downloads for each package, as measured by the number of distinct ip_id's. The 'countries' column,
| created with n_distinct(country), provides the number of countries in which each package was downloaded. And finally, the 'avg_bytes' column, created with
| mean(size), contains the mean download size (in bytes) for each package.

...
  |==============================================                                                                                       |  35%
| It's important that you understand how each column of pack_sum was created and what it means. Now that we've summarized the data by individual packages,
| let's play around with it some more to see what we can learn.

...
  |=================================================                                                                                    |  37%
| Naturally, we'd like to know which packages were most popular on the day these data were collected (July 8, 2014). Let's start by isolating the top 1% of
| packages, based on the total number of downloads as measured by the 'count' column.

...

  |===================================================                                                                                  |  38%
| We need to know the value of 'count' that splits the data into the top 1% and bottom 99% of packages based on total downloads. In statistics, this is called
| the 0.99, or 99%, sample quantile. Use quantile(pack_sum$count, probs = 0.99) to determine this number.

> quantile(pack_sum$count, probs = 0.99)  
   99% 
679.56 

| Nice work!
  |======================================================                                                                               |  40%
| Now we can isolate only those packages which had more than 679 total downloads. Use filter() to select all rows from pack_sum for which 'count' is strictly
| greater (>) than 679. Store the result in a new object called top_counts.

> filter(pack_sum, count>679)
# A tibble: 61 x 5
   package    count unique countries avg_bytes
   <chr>      <int>  <int>     <int>     <dbl>
 1 bitops      1549   1408        76    28715.
 2 car         1008    837        64  1229122.
 3 caTools      812    699        64   176589.
 4 colorspace  1683   1433        80   357411.
 5 data.table   680    564        59  1252721.
 6 DBI         2599    492        48   206933.
 7 devtools     769    560        55   212933.
 8 dichromat   1486   1257        74   134732.
 9 digest      2210   1894        83   120549.
10 doSNOW       740     75        24     8364.
# ... with 51 more rows

| Not exactly. Give it another go. Or, type info() for more options.

| Store the result of filter(pack_sum, count > 679) in a new object called top_counts.

> top_counts <- filter(pack_sum, count > 679) 

| Keep up the great work!
  |========================================================                                                                             |  42%
| Let's take a look at top_counts. Print it to the console.

> top_counts
# A tibble: 61 x 5
   package    count unique countries avg_bytes
   <chr>      <int>  <int>     <int>     <dbl>
 1 bitops      1549   1408        76    28715.
 2 car         1008    837        64  1229122.
 3 caTools      812    699        64   176589.
 4 colorspace  1683   1433        80   357411.
 5 data.table   680    564        59  1252721.
 6 DBI         2599    492        48   206933.
 7 devtools     769    560        55   212933.
 8 dichromat   1486   1257        74   134732.
 9 digest      2210   1894        83   120549.
10 doSNOW       740     75        24     8364.
# ... with 51 more rows

| Keep working like that and you'll get there!
  |===========================================================                                                                          |  44%
| There are only 61 packages in our top 1%, so we'd like to see all of them. Since dplyr only shows us the first 10 rows, we can use the View() function to see
| more.

...
  |=============================================================                                                                        |  46%
| View all 61 rows with View(top_counts). Note that the 'V' in View() is capitalized.

> View(top_counts)
Error in View(top_counts) : X11 dataentry cannot be loaded
In addition: Warning message:
In View(top_counts) :
  unable to load shared object '/Library/Frameworks/R.framework/Resources/modules//R_de.so':
  dlopen(/Library/Frameworks/R.framework/Resources/modules//R_de.so, 6): Library not loaded: /opt/X11/lib/libcairo.2.dylib
  Referenced from: /Library/Frameworks/R.framework/Resources/modules//R_de.so
  Reason: Incompatible library version: R_de.so requires version 11403.0.0 or later, but libcairo.2.dylib provides version 11203.0.0
> library(swirl)

| One more time. You can do it! Or, type info() for more options.

| Use View(top_counts) to view all 61 rows. This may not work properly in every programming environment. If you are having trouble, we recommend using RStudio.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself something unique.

What shall I call you? Nirdesh

| Would you like to continue with one of these lessons?

1: Getting and Cleaning Data Grouping and Chaining with dplyr
2: No. Let me start something new.

Selection: 1

| Attempting to load lesson dependencies...

| Package ‘dplyr’ loaded correctly!



| arrange() the rows of top_counts based on the 'count' column and assign the result to a new object called top_counts_sorted. We want the packages with the
| highest number of downloads at the top, which means we want 'count' to be in descending order. If you need help, check out ?arrange and/or ?desc.

> top_counts_shared <- arrange(top_counts, count)

| Not quite, but you're learning! Try again. Or, type info() for more options.

| arrange(top_counts, desc(count)) will arrange the rows of top_counts based on the values of the 'count' variable, in descending order. Don't forget to assign
| the result to top_counts_sorted.

> top_counts_shared <- arrange(top_counts, desc(count)) 

| You almost had it, but not quite. Try again. Or, type info() for more options.

| arrange(top_counts, desc(count)) will arrange the rows of top_counts based on the values of the 'count' variable, in descending order. Don't forget to assign
| the result to top_counts_sorted.

> top_counts_sorted <- arrange(top_counts, desc(count))

| Excellent work!
  |==================================================================                                                                   |  50%
| Now use View() again to see all 61 rows of top_counts_sorted.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself something unique.

What shall I call you? Nirdesh

| Would you like to continue with one of these lessons?

1: Getting and Cleaning Data Grouping and Chaining with dplyr
2: No. Let me start something new.

Selection: 1

| Attempting to load lesson dependencies...

| Package ‘dplyr’ loaded correctly!



| Like we did with 'count', let's find the 0.99, or 99%, quantile for the 'unique' variable with quantile(pack_sum$unique, probs = 0.99).

> quantile(pack_sum$unique, probs = 0.99)
99% 
465 

| Nice work!
  |===============================================================================                                                      |  60%
| Apply filter() to pack_sum to select all rows corresponding to values of 'unique' that are strictly greater than 465. Assign the result to a object called
| top_unique.

> top_unique <- filter(pack_sum , unique > 465)

| You got it!
  |==================================================================================                                                   |  62%
| Let's View() our top contenders!

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself something unique.

What shall I call you? Nirdesh

| Would you like to continue with one of these lessons?

1: Getting and Cleaning Data Grouping and Chaining with dplyr
2: No. Let me start something new.

Selection: 1

| Attempting to load lesson dependencies...

| Package ‘dplyr’ loaded correctly!



| Now arrange() top_unique by the 'unique' column, in descending order, to see which packages were downloaded from the greatest number of unique IP addresses.
| Assign the result to top_unique_sorted.

> top_uniqye_sorted <- arrange(top_unique, desc(unique))

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more options.

| arrange(top_unique, desc(unique)) will arrange the rows of top_unique based on the values of the 'unique' variable, in descending order. Assign the result to
| top_unique_sorted.

> top_unique_sorted <- arrange(top_unique, desc(unique))

| Excellent job!
  |=======================================================================================                                              |  65%
| View() the sorted data.

> 